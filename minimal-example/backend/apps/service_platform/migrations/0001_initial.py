# Generated by Django 4.2.16 on 2025-06-13 09:56

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='应用名称')),
                ('display_name', models.CharField(max_length=200, verbose_name='显示名称')),
                ('description', models.TextField(verbose_name='应用描述')),
                ('app_type', models.CharField(choices=[('web_service', 'Web服务'), ('api_service', 'API服务'), ('batch_job', '批处理任务'), ('stream_processing', '流处理'), ('ml_inference', '机器学习推理'), ('data_processing', '数据处理')], max_length=50, verbose_name='应用类型')),
                ('status', models.CharField(choices=[('draft', '草稿'), ('developing', '开发中'), ('testing', '测试中'), ('published', '已发布'), ('archived', '已归档')], default='draft', max_length=20, verbose_name='状态')),
                ('version', models.CharField(default='1.0.0', max_length=50, verbose_name='当前版本')),
                ('components', models.JSONField(default=dict, help_text='应用包含的各种组件配置', verbose_name='组件配置')),
                ('dependencies', models.JSONField(default=list, help_text='应用依赖的其他服务或模型', verbose_name='依赖配置')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('view_count', models.PositiveIntegerField(default=0, verbose_name='查看次数')),
                ('deployment_count', models.PositiveIntegerField(default=0, verbose_name='部署次数')),
            ],
            options={
                'verbose_name': 'AI应用',
                'verbose_name_plural': 'AI应用',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ApplicationVersion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('version', models.CharField(max_length=50, verbose_name='版本号')),
                ('description', models.TextField(blank=True, verbose_name='版本描述')),
                ('config', models.JSONField(default=dict, verbose_name='配置信息')),
                ('dockerfile', models.TextField(blank=True, verbose_name='Dockerfile内容')),
                ('requirements', models.TextField(blank=True, verbose_name='依赖要求')),
                ('image_url', models.CharField(blank=True, max_length=500, verbose_name='镜像地址')),
                ('manifest', models.JSONField(default=dict, verbose_name='Kubernetes清单')),
                ('status', models.CharField(choices=[('building', '构建中'), ('build_failed', '构建失败'), ('ready', '就绪'), ('deploying', '部署中'), ('deployed', '已部署'), ('failed', '失败'), ('deprecated', '已废弃')], default='building', max_length=20, verbose_name='状态')),
                ('build_log', models.TextField(blank=True, verbose_name='构建日志')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='service_platform.application', verbose_name='应用')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='创建者')),
            ],
            options={
                'verbose_name': '应用版本',
                'verbose_name_plural': '应用版本',
                'ordering': ['-created_at'],
                'unique_together': {('application', 'version')},
            },
        ),
        migrations.CreateModel(
            name='DifyApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='应用名称')),
                ('description', models.TextField(blank=True, verbose_name='应用描述')),
                ('icon', models.URLField(blank=True, verbose_name='应用图标')),
                ('dify_app_id', models.CharField(max_length=255, unique=True, verbose_name='Dify应用ID')),
                ('app_type', models.CharField(choices=[('chat', '对话应用'), ('completion', '文本生成'), ('workflow', '工作流'), ('agent', '智能体')], max_length=20, verbose_name='应用类型')),
                ('mode', models.CharField(choices=[('simple', '简单模式'), ('advanced', '高级模式')], default='simple', max_length=20, verbose_name='应用模式')),
                ('model_config', models.JSONField(default=dict, verbose_name='模型配置')),
                ('prompt_config', models.JSONField(default=dict, verbose_name='提示词配置')),
                ('conversation_config', models.JSONField(default=dict, verbose_name='对话配置')),
                ('api_key', models.CharField(blank=True, max_length=255, verbose_name='API密钥')),
                ('api_url', models.URLField(blank=True, verbose_name='API地址')),
                ('is_public', models.BooleanField(default=False, verbose_name='是否公开')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否激活')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='创建者')),
            ],
            options={
                'verbose_name': 'Dify应用',
                'verbose_name_plural': 'Dify应用',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ServiceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='分类名称')),
                ('description', models.TextField(blank=True, verbose_name='描述')),
                ('icon', models.CharField(blank=True, max_length=50, verbose_name='图标')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': '服务分类',
                'verbose_name_plural': '服务分类',
            },
        ),
        migrations.CreateModel(
            name='ServiceEndpoint',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='端点名称')),
                ('protocol', models.CharField(choices=[('http', 'HTTP'), ('https', 'HTTPS'), ('grpc', 'gRPC'), ('tcp', 'TCP'), ('udp', 'UDP')], default='http', max_length=10, verbose_name='协议')),
                ('host', models.CharField(max_length=255, verbose_name='主机地址')),
                ('port', models.PositiveIntegerField(verbose_name='端口')),
                ('path', models.CharField(default='/', max_length=500, verbose_name='路径')),
                ('status', models.CharField(choices=[('starting', '启动中'), ('running', '运行中'), ('stopping', '停止中'), ('stopped', '已停止'), ('error', '错误')], default='starting', max_length=20, verbose_name='状态')),
                ('replicas', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='副本数')),
                ('health_check_path', models.CharField(default='/health', max_length=200, verbose_name='健康检查路径')),
                ('last_health_check', models.DateTimeField(blank=True, null=True, verbose_name='最后健康检查时间')),
                ('is_healthy', models.BooleanField(default=False, verbose_name='是否健康')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('application_version', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='endpoints', to='service_platform.applicationversion', verbose_name='应用版本')),
            ],
            options={
                'verbose_name': '服务端点',
                'verbose_name_plural': '服务端点',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ServiceTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='模板名称')),
                ('description', models.TextField(verbose_name='模板描述')),
                ('template_type', models.CharField(choices=[('web_api', 'Web API模板'), ('ml_service', '机器学习服务模板'), ('data_pipeline', '数据管道模板'), ('microservice', '微服务模板'), ('batch_job', '批处理作业模板')], max_length=50, verbose_name='模板类型')),
                ('config_schema', models.JSONField(default=dict, verbose_name='配置模式')),
                ('default_config', models.JSONField(default=dict, verbose_name='默认配置')),
                ('dockerfile_template', models.TextField(verbose_name='Dockerfile模板')),
                ('manifest_template', models.JSONField(default=dict, verbose_name='Kubernetes清单模板')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_public', models.BooleanField(default=True, verbose_name='是否公开')),
                ('usage_count', models.PositiveIntegerField(default=0, verbose_name='使用次数')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='创建者')),
            ],
            options={
                'verbose_name': '服务模板',
                'verbose_name_plural': '服务模板',
                'ordering': ['-usage_count', 'name'],
            },
        ),
        migrations.CreateModel(
            name='DifyDataset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='知识库名称')),
                ('description', models.TextField(blank=True, verbose_name='知识库描述')),
                ('dify_dataset_id', models.CharField(max_length=255, unique=True, verbose_name='Dify知识库ID')),
                ('index_type', models.CharField(choices=[('high_quality', '高质量模式'), ('economy', '经济模式')], default='high_quality', max_length=20, verbose_name='索引类型')),
                ('embedding_model', models.CharField(blank=True, max_length=255, verbose_name='嵌入模型')),
                ('document_count', models.IntegerField(default=0, verbose_name='文档数量')),
                ('character_count', models.IntegerField(default=0, verbose_name='字符数量')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='创建者')),
            ],
            options={
                'verbose_name': 'Dify知识库',
                'verbose_name_plural': 'Dify知识库',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='application',
            name='category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='service_platform.servicecategory', verbose_name='分类'),
        ),
        migrations.AddField(
            model_name='application',
            name='created_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='创建者'),
        ),
        migrations.CreateModel(
            name='ServiceMonitoring',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cpu_usage', models.FloatField(verbose_name='CPU使用率(%)')),
                ('memory_usage', models.FloatField(verbose_name='内存使用率(%)')),
                ('request_count', models.PositiveIntegerField(default=0, verbose_name='请求数')),
                ('error_count', models.PositiveIntegerField(default=0, verbose_name='错误数')),
                ('response_time', models.FloatField(verbose_name='响应时间(ms)')),
                ('network_in', models.FloatField(default=0, verbose_name='网络入流量(MB)')),
                ('network_out', models.FloatField(default=0, verbose_name='网络出流量(MB)')),
                ('custom_metrics', models.JSONField(default=dict, verbose_name='自定义指标')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='时间戳')),
                ('endpoint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monitoring_data', to='service_platform.serviceendpoint', verbose_name='服务端点')),
            ],
            options={
                'verbose_name': '服务监控',
                'verbose_name_plural': '服务监控',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['endpoint', '-timestamp'], name='service_pla_endpoin_ce240e_idx'), models.Index(fields=['-timestamp'], name='service_pla_timesta_91fb1d_idx')],
            },
        ),
        migrations.CreateModel(
            name='ServiceAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='告警标题')),
                ('message', models.TextField(verbose_name='告警消息')),
                ('level', models.CharField(choices=[('info', '信息'), ('warning', '警告'), ('error', '错误'), ('critical', '严重')], max_length=20, verbose_name='告警级别')),
                ('status', models.CharField(choices=[('active', '活跃'), ('resolved', '已解决'), ('acknowledged', '已确认'), ('ignored', '已忽略')], default='active', max_length=20, verbose_name='状态')),
                ('rule_name', models.CharField(max_length=200, verbose_name='规则名称')),
                ('condition', models.JSONField(default=dict, verbose_name='触发条件')),
                ('triggered_at', models.DateTimeField(auto_now_add=True, verbose_name='触发时间')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='解决时间')),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True, verbose_name='确认时间')),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='确认人')),
                ('endpoint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='service_platform.serviceendpoint', verbose_name='服务端点')),
            ],
            options={
                'verbose_name': '服务告警',
                'verbose_name_plural': '服务告警',
                'ordering': ['-triggered_at'],
                'indexes': [models.Index(fields=['status', '-triggered_at'], name='service_pla_status_3061d5_idx'), models.Index(fields=['level', '-triggered_at'], name='service_pla_level_322d7e_idx')],
            },
        ),
        migrations.CreateModel(
            name='DifyConversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conversation_id', models.CharField(max_length=255, verbose_name='对话ID')),
                ('title', models.CharField(blank=True, max_length=255, verbose_name='对话标题')),
                ('summary', models.TextField(blank=True, verbose_name='对话摘要')),
                ('message_count', models.IntegerField(default=0, verbose_name='消息数量')),
                ('token_count', models.IntegerField(default=0, verbose_name='Token消耗')),
                ('is_pinned', models.BooleanField(default=False, verbose_name='是否置顶')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conversations', to='service_platform.difyapplication', verbose_name='关联应用')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': 'Dify对话',
                'verbose_name_plural': 'Dify对话',
                'ordering': ['-updated_at'],
                'unique_together': {('application', 'conversation_id')},
            },
        ),
    ]
