version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15
    container_name: ai_platform_postgres
    environment:
      POSTGRES_DB: ai_platform
      POSTGRES_USER: ai_user
      POSTGRES_PASSWORD: ai_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ai_platform_network

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: ai_platform_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai_platform_network

  # Django 后端 (开发模式)
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: ai_platform_backend
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://ai_user:ai_password@postgres:5432/ai_platform
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - media_files:/app/media
    depends_on:
      - postgres
      - redis
    networks:
      - ai_platform_network
    command: python manage.py runserver 0.0.0.0:8000

  # Next.js 前端 (开发模式)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: ai_platform_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - ai_platform_network
    command: npm run dev

  # MinIO 对象存储 (可选)
  minio:
    image: minio/minio:latest
    container_name: ai_platform_minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - ai_platform_network
    command: server /data --console-address ":9001"

volumes:
  postgres_data:
  redis_data:
  media_files:
  minio_data:

networks:
  ai_platform_network:
    driver: bridge
