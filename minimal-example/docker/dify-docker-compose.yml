version: '3.8'

x-shared-env: &shared-api-worker-env
  # Dify Core API Configuration
  CONSOLE_API_URL: http://192.168.110.88:8080
  CONSOLE_WEB_URL: http://192.168.110.88:8080
  SERVICE_API_URL: http://192.168.110.88:8080/api
  APP_API_URL: http://192.168.110.88:8080/api
  APP_WEB_URL: http://192.168.110.88:8080
  FILES_URL: http://192.168.110.88:8080/files
  
  # Debug and Logging
  LOG_LEVEL: ${DIFY_LOG_LEVEL:-INFO}
  DEBUG: ${DIFY_DEBUG:-false}
  FLASK_DEBUG: ${DIFY_FLASK_DEBUG:-false}
  ENABLE_REQUEST_LOGGING: ${DIFY_ENABLE_REQUEST_LOGGING:-false}
  
  # Security
  SECRET_KEY: ${DIFY_SECRET_KEY:-sk-ai-platform-dify-integration-2024}
  INIT_PASSWORD: ${DIFY_INIT_PASSWORD:-admin123456}
  DEPLOY_ENV: ${DIFY_DEPLOY_ENV:-DEVELOPMENT}
  # 完全禁用管理员访问码检查
  ENABLE_ADMIN_ACCESS_CODE: false
  ADMIN_ACCESS_CODE_CHECK_ENABLED: false
  CONSOLE_ADMIN_ACCESS_CODE_CHECK: false
  SKIP_CONSOLE_ADMIN_ACCESS_CODE: true
  SYSTEM_INITIALIZED: true
  
  # Database Configuration (使用共享的 PostgreSQL)
  DB_USERNAME: ${DIFY_POSTGRES_USER:-ai_user}
  DB_PASSWORD: ${DIFY_POSTGRES_PASSWORD:-ai_password}
  DB_HOST: ${DIFY_POSTGRES_HOST:-ai_platform_postgres}
  DB_PORT: ${DIFY_POSTGRES_PORT:-5432}
  DB_DATABASE: ${DIFY_DB_NAME:-dify}
  SQLALCHEMY_POOL_SIZE: ${DIFY_SQLALCHEMY_POOL_SIZE:-30}
  SQLALCHEMY_POOL_RECYCLE: ${DIFY_SQLALCHEMY_POOL_RECYCLE:-3600}
  SQLALCHEMY_ECHO: ${DIFY_SQLALCHEMY_ECHO:-false}
  
  # Redis Configuration (使用 Dify 的 Redis)
  REDIS_HOST: ${DIFY_REDIS_HOST:-dify_redis}
  REDIS_PORT: ${DIFY_REDIS_PORT:-6379}
  REDIS_PASSWORD: ${DIFY_REDIS_PASSWORD:-}
  REDIS_USE_SSL: ${REDIS_USE_SSL:-false}
  REDIS_DB: ${DIFY_REDIS_DB:-2}
  CELERY_BROKER_URL: ${DIFY_CELERY_BROKER_URL:-redis://dify_redis:6379/3}
  
  # Storage Configuration (使用本地存储)
  STORAGE_TYPE: ${DIFY_STORAGE_TYPE:-local}
  STORAGE_LOCAL_PATH: ${DIFY_STORAGE_LOCAL_PATH:-/app/storage}
  
  # API Configuration
  WEB_API_CORS_ALLOW_ORIGINS: ${DIFY_WEB_API_CORS_ALLOW_ORIGINS:-*}
  CONSOLE_CORS_ALLOW_ORIGINS: ${DIFY_CONSOLE_CORS_ALLOW_ORIGINS:-*}
  
  # LLM Configuration
  OPENAI_API_BASE: ${DIFY_OPENAI_API_BASE:-https://api.openai.com/v1}
  
  # Performance
  APP_MAX_ACTIVE_REQUESTS: ${DIFY_APP_MAX_ACTIVE_REQUESTS:-0}
  APP_MAX_EXECUTION_TIME: ${DIFY_APP_MAX_EXECUTION_TIME:-1200}
  SERVER_WORKER_AMOUNT: ${DIFY_SERVER_WORKER_AMOUNT:-1}
  SERVER_WORKER_CLASS: ${DIFY_SERVER_WORKER_CLASS:-gevent}
  GUNICORN_TIMEOUT: ${DIFY_GUNICORN_TIMEOUT:-360}

services:
  # Dify API Server
  dify-api:
    image: ai-platform-dify-api:latest
    container_name: ai_platform_dify_api
    restart: unless-stopped
    ports:
      - "5001:5001"
    environment:
      <<: *shared-api-worker-env
      MODE: api
      # 移除管理员访问码设置，使用环境变量控制
    volumes:
      - dify_app_storage:/app/storage
    networks:
      - ai_platform_network
    command: >
      bash -c "
      python -m flask db upgrade &&
      python app.py
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Dify Worker (Background Tasks)
  dify-worker:
    image: ai-platform-dify-api:latest
    container_name: ai_platform_dify_worker
    restart: unless-stopped
    environment:
      <<: *shared-api-worker-env
      MODE: worker
      # 移除管理员访问码设置，使用环境变量控制
    volumes:
      - dify_app_storage:/app/storage
    networks:
      - ai_platform_network
    command: celery -A app.celery worker -P gevent -c 1 --loglevel INFO -Q dataset,generation,mail,ops_trace,app_deletion
    healthcheck:
      test: ["CMD", "bash", "-c", "celery -A app.celery inspect ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Dify Web Console
  dify-web:
    image: langgenius/dify-web:0.6.13
    restart: always
    depends_on:
      - dify-api
    environment:
      # 修复路径重复问题 - 不包含 /console/api 路径
      - CONSOLE_API_URL=http://192.168.110.88:8080
      - APP_API_URL=http://192.168.110.88:8080/v1
      - MARKETPLACE_API_URL=https://marketplace.dify.ai
    networks:
      - ai_platform_network

  dify-nginx:
    image: nginx:1.25
    restart: always
    ports:
      - "8080:80"
    volumes:
      - ./dify-nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - dify-api
      - dify-web
    networks:
      - ai_platform_network

volumes:
  dify_app_storage:
    driver: local

networks:
  ai_platform_network:
    external: true
