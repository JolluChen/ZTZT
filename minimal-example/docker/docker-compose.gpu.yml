version: '3.8'

networks:
  ai_platform_network:
    external: true

services:
  # NVIDIA Triton Inference Server
  triton-server:
    image: nvcr.io/nvidia/tritonserver:23.08-py3
    container_name: ai_platform_triton_server
    restart: unless-stopped
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    ports:
      - "8100:8000"      # HTTP
      - "8101:8001"      # GRPC  
      - "8102:8002"      # Metrics
    volumes:
      - ../model-repository:/models
    command: ["tritonserver", "--model-repository=/models", "--strict-model-config=false", "--log-verbose=1"]
    networks:
      - ai_platform_network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # NVIDIA DCGM Exporter (GPU metrics for Prometheus)
  dcgm-exporter:
    image: nvcr.io/nvidia/k8s/dcgm-exporter:3.1.8-3.1.5-ubuntu20.04
    container_name: ai_platform_dcgm_exporter
    restart: unless-stopped
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    ports:
      - "9400:9400"
    cap_add:
      - SYS_ADMIN
    networks:
      - ai_platform_network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # Ollama LLM服务
  ollama:
    image: ollama/ollama:latest
    container_name: ai_platform_ollama
    restart: unless-stopped
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    ports:
      - "11434:11434"
    volumes:
      - ../data/ollama:/root/.ollama
    networks:
      - ai_platform_network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # OpenWebUI (Ollama前端界面)
  openwebui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: ai_platform_openwebui
    restart: unless-stopped
    ports:
      - "3001:8080"
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - WEBUI_SECRET_KEY=ai-platform-secret-key
    volumes:
      - ../data/openwebui:/app/backend/data
    depends_on:
      - ollama
    networks:
      - ai_platform_network

  # GPU Stack Prometheus (专门收集GPU指标)
  gpu-prometheus:
    image: prom/prometheus:latest
    container_name: ai_platform_gpu_prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"      # GPU Prometheus on different port
    volumes:
      - ../monitoring/gpu-prometheus:/etc/prometheus
      - ../data/gpu-prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.listen-address=:9090'
    networks:
      - ai_platform_network

  # GPU监控面板 (Grafana专用实例)
  gpu-grafana:
    image: grafana/grafana:latest
    container_name: ai_platform_gpu_grafana
    restart: unless-stopped
    ports:
      - "3003:3000"      # GPU Grafana dashboard
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=gpu_monitor_2025
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - ../data/gpu-grafana:/var/lib/grafana
      - ../monitoring/gpu-grafana:/etc/grafana/provisioning
    networks:
      - ai_platform_network
    depends_on:
      - gpu-prometheus
      - dcgm-exporter

  # GPU负载测试工具 (可选)
  gpu-burn:
    image: nvidia/cuda:12.0-devel-ubuntu22.04
    container_name: ai_platform_gpu_burn
    restart: "no"
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    command: ["sleep", "infinity"]
    networks:
      - ai_platform_network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    profiles: ["testing"]

  # GPUStack 管理平台 (完整的 GPU 管理界面)
  gpustack:
    image: gpustack/gpustack:latest
    container_name: ai_platform_gpustack
    restart: unless-stopped
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - GPUSTACK_PORT=8080
      - GPUSTACK_HOST=0.0.0.0
    ports:
      - "8080:8080"      # GPUStack 管理界面
    volumes:
      - ../data/gpustack:/var/lib/gpustack
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - ai_platform_network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
