version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15
    container_name: ai_platform_postgres
    environment:
      POSTGRES_DB: ai_platform
      POSTGRES_USER: ai_user
      POSTGRES_PASSWORD: ai_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ai_platform_network

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: ai_platform_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai_platform_network
  # Django 后端 (开发模式)
  backend:
    build: 
      context: ../backend
      dockerfile: Dockerfile.dev
    container_name: ai_platform_backend
    environment:
      - DEBUG=1
      - DATABASE_URL=postgresql://ai_user:ai_password@postgres:5432/ai_platform
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - media_files:/app/media
    depends_on:
      - postgres
      - redis
    networks:
      - ai_platform_network
    command: python manage.py runserver 0.0.0.0:8000

  # Next.js 前端 (开发模式)
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.dev
    container_name: ai_platform_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - ai_platform_network
    command: npm run dev
  # MinIO 对象存储 (可选)
  minio:
    image: minio/minio:latest
    container_name: ai_platform_minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - ai_platform_network
    command: server /data --console-address ":9001"  # NVIDIA Triton Inference Server
  triton-server:
    image: nvcr.io/nvidia/tritonserver:24.08-py3
    container_name: ai_platform_triton
    ports:
      - "8100:8000"  # HTTP (避免与Django 8000冲突)
      - "8001:8001"  # gRPC
      - "8002:8002"  # Metrics
    volumes:
      - ../model-repository:/models
      - triton_cache:/opt/tritonserver
    networks:
      - ai_platform_network
    command: tritonserver --model-repository=/models --allow-http=true --allow-grpc=true --allow-metrics=true --log-verbose=1
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    environment:
      - CUDA_VISIBLE_DEVICES=all
    # 仅在有GPU时启用此服务
    profiles:
      - gpu

  # Ollama for LLM backend (如果不使用GPU，可以用作OpenWebUI的后端)
  ollama:
    image: ollama/ollama:latest
    container_name: ai_platform_ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - ai_platform_network
    environment:
      - OLLAMA_HOST=0.0.0.0
    # 可选GPU支持
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    profiles:
      - ollama
  # OpenWebUI for LLM interaction
  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: ai_platform_openwebui
    ports:
      - "8080:8080"
    volumes:
      - open_webui_data:/app/backend/data
    networks:
      - ai_platform_network
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - WEBUI_SECRET_KEY=your-secret-key-here
      - WEBUI_AUTH=true
      - DEFAULT_LOCALE=zh-CN
    depends_on:
      - ollama
    restart: unless-stopped
    profiles:
      - ollama

  # Prometheus for monitoring (including GPU metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: ai_platform_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - ai_platform_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ai_platform_grafana
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana:/etc/grafana/provisioning
    networks:
      - ai_platform_network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # DCGM Exporter for GPU monitoring
  dcgm-exporter:
    image: nvcr.io/nvidia/k8s/dcgm-exporter:3.1.8-3.1.5-ubuntu20.04
    container_name: ai_platform_dcgm_exporter
    ports:
      - "9400:9400"
    networks:
      - ai_platform_network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    environment:
      - DCGM_EXPORTER_LISTEN=0.0.0.0:9400
      - DCGM_EXPORTER_KUBERNETES=false
    command: ["-f", "/etc/dcgm-exporter/dcp-metrics-included.csv"]
    profiles:
      - gpu
      - monitoring

volumes:
  postgres_data:
  redis_data:
  media_files:
  minio_data:
  triton_cache:
  ollama_data:
  open_webui_data:
  prometheus_data:
  grafana_data:

networks:
  ai_platform_network:
    driver: bridge
